[project]
name = "mymodels"
version = "0.1.0"
description = "A set of pydantic models that elicit slow startup times in pydantic v2 (for now)"
authors = [{ name = "Marco de Lannoy Kobayashi", email = "mdlkdev@gmail.com" }]
readme = "README.md"
requires-python = ">=3.9"
dependencies = ["pydantic>=1.10.18"]

[project.scripts]
mymodels = "mymodels:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
files = ['src/mymodels', 'tests']
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

exclude = '''(?x)(
    ^tests/
)'''
# follow_imports = "skip"
# ignore_missing_imports = true

plugins = ["pydantic.mypy"]

[tool.ruff]
include = ["src/mymodels/*.py", "tests/*.py"]

# Always generate Python 3.9-compatible code.
target-version = "py39"

# Apply safe auto-fixes
fix = true

lint.select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E",
    "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
lint.ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    "ERA001", # Commented out code - lots of false positives
    "TRY003", # Avoid specifying long messages outside exception class
    "SIM108",
]
# Extended set of fixable rulesextend-exclude = ["coverage*"]
lint.extend-fixable = ["B"]

# On top of the default `select` (`E`, `F`), enable:
# [TODO]: Add these when we officially support tzinfo, pathlib, and full type-hints!
# "DTZ",      # flake8-datetimez
# "PTH",      # flake8-use-pathlib
# "ANN",      # flake8-annotations
lint.extend-select = [
    "W",     # warnings - mostly whitespace
    "C90",   # mccabe code complexity
    "UP",    # pyupgrade
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "T10",   # flake8-debugger
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "INP",   # flake8-no-pep420
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "ARG",   # flake8-unused-arguments
    "ERA",   # eradicate
    "PD",    # pandas
    "PL",    # pylint
    "NPY",   # numpy
    "PERF",  # perflint
    "RUF",   # ruff
]
cache-dir = "~/.cache/ruff"

extend-exclude = ["coverage*"]

# Line length to enforce
line-length = 99

# Auto-ignore stuff in .gitignore
respect-gitignore = true

src = ["src/mymodels", "tests"]

# Extended set of ignores per-file
[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["E402"]
"tests/*.py" = [
    "D100",
    "D104",
    "E501",
    "ANN",
    "S101",
    "PLR",
    "ARG001",
    "ARG002",
    "PTH118",
    "PERF",
]
"bench/*.py" = ["INP001"]

[tool.ruff.lint.isort]
# Whitelist first party imports
known-first-party = ["mymodels"]

[tool.ruff.lint.flake8-annotations]
# Suppress fixes for *args & **kwargs types
allow-star-arg-any = true

# Suprress rules for untyped code - useful for gradually typing
ignore-fully-untyped = true

# Ignore no return type for __init__()
mypy-init-return = true

# Ignore rules for dummy variables/args like '_'
suppress-dummy-args = true

[tool.ruff.lint.pydocstyle]
# USe Google style docstrings
convention = "google"

[tool.ruff.lint.pylint]
# Maximum number of arguments for function / method.
max-args = 8

# Maximum number of branch for function / method body.
max-branches = 12

# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

# Maximum number of return / yield for function / method body.
max-returns = 6

# Maximum number of statements in function / method body.
max-statements = 75

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[dependency-groups]
dev = [
    "astor>=0.8.1",
    "faker",
    "pytest-datadir>=1.5.0",
    "pytest>=8.3.3",
    "ruff>=0.8.1",
    "nox>=2024.10.9",
    "py-spy>=0.4.0",
    "polars>=1.16.0",
]
